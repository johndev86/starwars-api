{"version":3,"sources":["components/ObjectCard.js","components/SearchBox.js","containers/ObjectList.js","containers/App.js","serviceWorker.js","index.js"],"names":["ObjectCard","_ref","object","cardInfo","display","map","e","i","react_default","a","createElement","key","className","replace","SearchBox","searchfield","searchChange","type","placeholder","onChange","ObjectList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","console","log","state","objects","_this2","props","match","path","fetch","Config","url","then","response","json","data","results","_this$state","card_display","objectComponent","filter","toLowerCase","includes","components_ObjectCard","length","components_SearchBox","Component","App","BrowserRouter","basename","process","Link","to","Route","exact","render","component","Boolean","window","location","hostname","ReactDOM","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25a8ae65.chunk.js","sourcesContent":["import React from 'react';\n\nconst ObjectCard = ({object, display}) => {\n    \n\n    const cardInfo = display.map((e, i)=>{\n        return i===0 ? <h3 key={i}>{object[e]}</h3> :\n        <p className=\"tl\" key={i}><span className=\"b ttc\">{e.replace(/[_]/g,' ')}: </span>{object[e]}</p>;\n    });\n    \n    return (\n        <div className=\"bg-gold dib br3 ma2 pb3 pl3 pr3 swcard\">\n            {cardInfo}\n        </div>\n    );\n}\n\nexport default ObjectCard;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n        <input\n            className='pa2 ba br3 b--green bg-lightest-blue'\n            type='search'\n            placeholder='Search...'\n            onChange={searchChange}\n        />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport ObjectCard from '../components/ObjectCard';\nimport SearchBox from '../components/SearchBox';\nimport Config from '../config/apiconfig';\n\nclass ObjectList extends Component {\n    constructor() {\n        super()\n        console.log('init');\n        this.state = {\n            objects: [],\n            searchfield: '',\n            type: ''\n        }\n    }\n\n    componentDidMount() {\n        \n        const type = this.props.match.path.replace(/[/]/g,'');\n        fetch(Config.url+type)\n        .then(response=> response.json())\n        .then(data => {this.setState({ objects: data.results})});\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n        \n        const {objects, searchfield} = this.state;\n        const type = this.props.match.path.replace(/[/]/g,'');\n\n        const display = Config.card_display[type];\n        console.log(\"display: \", display);\n        const filteredObjects = objects.filter(object =>{\n            return object[display[0]].toLowerCase().includes(searchfield.toLowerCase());\n          });\n        const objectComponent = filteredObjects.map((e, i) => {\n            return <ObjectCard key={i} object={e} display={display}/>;\n        });\n        return !objects.length ? \n        <h1>Loading...</h1> :\n        (\n            <div>\n                <h1 className=\"ttc\">{type}</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                {objectComponent}\n            </div>\n        );\n    }\n}\n\nexport default ObjectList;","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport ObjectList from './ObjectList';\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <nav>\n            <ul className=\"list flex\">\n              <li className=\"pa2\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"pa2\">\n                <Link to=\"/people/\">People</Link>\n              </li>\n              <li className=\"pa2\">\n                <Link to=\"/films/\">Films</Link>\n              </li>\n              <li className=\"pa2\">\n                <Link to=\"/starships/\">Starships</Link>\n              </li>\n              <li className=\"pa2\">\n                <Link to=\"/vehicles/\">Vehicles</Link>\n              </li>\n              <li className=\"pa2\">\n                <Link to=\"/species/\">Species</Link>\n              </li>\n              <li className=\"pa2\">\n                <Link to=\"/planets/\">Planets</Link>\n              </li>\n            </ul>\n          </nav>\n\n          <Route path=\"/\" exact render={() => <h1>Welcome to Starwars</h1>}/>\n          <Route path=\"/people/\" component={ObjectList} />\n          <Route path=\"/films/\" component={ObjectList} />\n          <Route path=\"/starships/\" component={ObjectList} />\n          <Route path=\"/vehicles/\" component={ObjectList} />\n          <Route path=\"/species/\" component={ObjectList} />\n          <Route path=\"/planets/\" component={ObjectList} />\n        </div>\n      </Router>\n      \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}